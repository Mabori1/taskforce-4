// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../../../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Task {
  taskId     Int       @id @default(autoincrement()) @map("task_id")
  title      String    @default("")
  details    String    @default("")
  category   Category  @relation(fields: [categoryId], references: [categoryId])
  categoryId Int       @map("category_id")
  price      Int?
  deadline   DateTime? @default(dbgenerated("NOW() + INTERVAL '7 DAYS'"))
  image      String?   @default("")
  address    String?   @default("")
  city       String    @default("Москва")
  status     String    @default("New")

  userId     String? @map("user_id")
  executorId String? @default("") @map("executor_id")

  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  responsesCount Int?     @default(0) @map("responses_count")
  commentsCount  Int?     @default(0) @map("comments_count")

  tags      Tag[]
  comments  Comment[]
  responses Response[]
  review    Review?

  @@map("tasks")
}

model Category {
  categoryId Int    @id @default(autoincrement()) @map("category_id")
  name       String @unique
  task       Task[]

  @@map("categories")
}

model Comment {
  commentId Int      @id @default(autoincrement()) @map("comment_id")
  text      String   @default("")
  task      Task     @relation(fields: [taskId], references: [taskId], onDelete: Cascade, onUpdate: Cascade)
  taskId    Int      @map("task_id")
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("comments")
}

model Tag {
  tagId     Int      @id @default(autoincrement()) @map("tag_id")
  name      String   @unique
  createdAt DateTime @default(now())
  task      Task[]

  @@map("tags")
}

model Response {
  responseId Int      @id @default(autoincrement()) @map("response_id")
  offerPrice Int
  task       Task     @relation(fields: [taskId], references: [taskId], onDelete: Cascade, onUpdate: Cascade)
  taskId     Int      @map("task_id")
  executorId String   @map("executor_id")
  createdAt  DateTime @default(now()) @map("created_at")

  @@map("responses")
}

model Review {
  reviewId   Int    @id @default(autoincrement()) @map("review_id")
  task       Task   @relation(fields: [taskId], references: [taskId], onDelete: Cascade, onUpdate: Cascade)
  taskId     Int    @unique @map("task_id")
  userId     String @map("user_id")
  executorId String @map("executor_id")
  review     String @default("")
  evaluation Int    @default(0)

  @@map("reviews")
}
