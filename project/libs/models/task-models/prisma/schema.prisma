// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../../../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Task {
  taskId   Int      @id @default(autoincrement()) @map("task_id")
  title    String   @default("")
  details  String   @default("")
  price    Int
  deadline DateTime @default(now())
  image    String   @default("")
  address  String   @default("")
  city     String   @default("")
  status   String   @default("new")

  userId String? @map("user_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  tags       Tag[]
  categories Category[]
  comments   Comment[]
  review     Review?

  @@map("tasks")
}

model Category {
  categoryId Int    @id @default(autoincrement()) @map("category_id")
  name       String @unique @default("")
  task       Task[]

  @@map("categories")
}

model Comment {
  commentId Int      @id @default(autoincrement()) @map("comment_id")
  text      String   @default("")
  task      Task     @relation(fields: [taskId], references: [taskId], onDelete: Cascade, onUpdate: Cascade)
  taskId    Int      @map("task_id")
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("comments")
}

model Tag {
  tagId Int    @id @default(autoincrement()) @map("tag_id")
  name  String @unique @default("")
  task  Task[]

  @@map("tags")
}

model Review {
  reviewId   Int    @id @default(autoincrement()) @map("review_id")
  task       Task   @relation(fields: [taskId], references: [taskId], onDelete: Cascade, onUpdate: Cascade)
  taskId     Int    @unique @map("task_id")
  userId     String @map("user_id")
  review     String @default("")
  evaluation Int

  @@map("reviews")
}
